{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar delay = function delay(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\nvar mockHotels = [{\n  id: 1,\n  name: 'Luxury Hotel & Spa',\n  location: 'New York',\n  price: 299,\n  rating: 4.8,\n  image: 'https://via.placeholder.com/300x200?text=Luxury+Hotel',\n  description: 'Experience luxury in the heart of Manhattan.'\n}, {\n  id: 2,\n  name: 'Seaside Resort',\n  location: 'Miami',\n  price: 199,\n  rating: 4.5,\n  image: 'https://via.placeholder.com/300x200?text=Seaside+Resort',\n  description: 'Beautiful beachfront resort with stunning ocean views.'\n}];\nvar mockBookings = [];\nexport var mockApi = {\n  login: function () {\n    var _login = _asyncToGenerator(function* (credentials) {\n      yield delay(1000);\n      if (credentials.email === 'test@example.com' && credentials.password === 'password') {\n        return {\n          user: {\n            id: 1,\n            name: 'Test User',\n            email: credentials.email\n          },\n          token: 'mock-jwt-token',\n          refreshToken: 'mock-refresh-token'\n        };\n      }\n      throw new Error('Invalid credentials');\n    });\n    function login(_x) {\n      return _login.apply(this, arguments);\n    }\n    return login;\n  }(),\n  register: function () {\n    var _register = _asyncToGenerator(function* (userData) {\n      yield delay(1000);\n      return {\n        user: _objectSpread({\n          id: Date.now()\n        }, userData),\n        token: 'mock-jwt-token',\n        refreshToken: 'mock-refresh-token'\n      };\n    });\n    function register(_x2) {\n      return _register.apply(this, arguments);\n    }\n    return register;\n  }(),\n  getHotels: function () {\n    var _getHotels = _asyncToGenerator(function* () {\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      yield delay(1000);\n      return mockHotels;\n    });\n    function getHotels() {\n      return _getHotels.apply(this, arguments);\n    }\n    return getHotels;\n  }(),\n  getHotelById: function () {\n    var _getHotelById = _asyncToGenerator(function* (id) {\n      yield delay(500);\n      var hotel = mockHotels.find(function (h) {\n        return h.id === id;\n      });\n      if (!hotel) throw new Error('Hotel not found');\n      return hotel;\n    });\n    function getHotelById(_x3) {\n      return _getHotelById.apply(this, arguments);\n    }\n    return getHotelById;\n  }(),\n  createBooking: function () {\n    var _createBooking = _asyncToGenerator(function* (bookingData) {\n      yield delay(1000);\n      var newBooking = _objectSpread(_objectSpread({\n        id: Date.now()\n      }, bookingData), {}, {\n        status: 'confirmed',\n        createdAt: new Date().toISOString()\n      });\n      mockBookings.push(newBooking);\n      return newBooking;\n    });\n    function createBooking(_x4) {\n      return _createBooking.apply(this, arguments);\n    }\n    return createBooking;\n  }(),\n  getBookings: function () {\n    var _getBookings = _asyncToGenerator(function* (userId) {\n      yield delay(1000);\n      return mockBookings.filter(function (booking) {\n        return booking.userId === userId;\n      });\n    });\n    function getBookings(_x5) {\n      return _getBookings.apply(this, arguments);\n    }\n    return getBookings;\n  }()\n};","map":{"version":3,"names":["delay","ms","Promise","resolve","setTimeout","mockHotels","id","name","location","price","rating","image","description","mockBookings","mockApi","login","_login","_asyncToGenerator","credentials","email","password","user","token","refreshToken","Error","_x","apply","arguments","register","_register","userData","_objectSpread","Date","now","_x2","getHotels","_getHotels","filters","length","undefined","getHotelById","_getHotelById","hotel","find","h","_x3","createBooking","_createBooking","bookingData","newBooking","status","createdAt","toISOString","push","_x4","getBookings","_getBookings","userId","filter","booking","_x5"],"sources":["/Users/huynhquochieu/SWINBURNE/LAB/hotel-booking-app/src/api/apiService.js"],"sourcesContent":["// Simulated delay to mimic API calls\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// Mock data\nconst mockHotels = [\n  {\n    id: 1,\n    name: 'Luxury Hotel & Spa',\n    location: 'New York',\n    price: 299,\n    rating: 4.8,\n    image: 'https://via.placeholder.com/300x200?text=Luxury+Hotel',\n    description: 'Experience luxury in the heart of Manhattan.',\n  },\n  {\n    id: 2,\n    name: 'Seaside Resort',\n    location: 'Miami',\n    price: 199,\n    rating: 4.5,\n    image: 'https://via.placeholder.com/300x200?text=Seaside+Resort',\n    description: 'Beautiful beachfront resort with stunning ocean views.',\n  },\n];\n\nconst mockBookings = [];\n\nexport const mockApi = {\n  // Auth endpoints\n  login: async (credentials) => {\n    await delay(1000);\n    if (credentials.email === 'test@example.com' && credentials.password === 'password') {\n      return {\n        user: { id: 1, name: 'Test User', email: credentials.email },\n        token: 'mock-jwt-token',\n        refreshToken: 'mock-refresh-token',\n      };\n    }\n    throw new Error('Invalid credentials');\n  },\n\n  register: async (userData) => {\n    await delay(1000);\n    return {\n      user: { id: Date.now(), ...userData },\n      token: 'mock-jwt-token',\n      refreshToken: 'mock-refresh-token',\n    };\n  },\n\n  // Hotels endpoints\n  getHotels: async (filters = {}) => {\n    await delay(1000);\n    return mockHotels;\n  },\n\n  getHotelById: async (id) => {\n    await delay(500);\n    const hotel = mockHotels.find((h) => h.id === id);\n    if (!hotel) throw new Error('Hotel not found');\n    return hotel;\n  },\n\n  // Bookings endpoints\n  createBooking: async (bookingData) => {\n    await delay(1000);\n    const newBooking = {\n      id: Date.now(),\n      ...bookingData,\n      status: 'confirmed',\n      createdAt: new Date().toISOString(),\n    };\n    mockBookings.push(newBooking);\n    return newBooking;\n  },\n\n  getBookings: async (userId) => {\n    await delay(1000);\n    return mockBookings.filter((booking) => booking.userId === userId);\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}