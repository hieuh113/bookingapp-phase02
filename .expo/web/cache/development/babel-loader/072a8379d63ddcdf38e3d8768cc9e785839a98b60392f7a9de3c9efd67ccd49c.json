{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from 'react-redux';\nimport { store } from \"./src/redux/store\";\nimport AppNavigator from \"./src/navigation/AppNavigator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { loginSuccess } from \"./src/redux/slices/authSlice\";\nimport apiService from \"./src/api/apiService\";\nimport SplashScreen from \"./src/screens/SplashScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  useEffect(function () {\n    var checkLoginStatus = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem('token');\n          if (token) {\n            var user = {\n              id: '1',\n              name: 'John Doe',\n              email: 'john.doe@example.com'\n            };\n            store.dispatch(loginSuccess(user));\n          }\n        } catch (error) {\n          console.error('Error checking login status:', error);\n        }\n      });\n      return function checkLoginStatus() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    checkLoginStatus();\n    var preloadData = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          yield apiService.getHotels();\n          yield apiService.getShortVideos();\n          setIsLoading(false);\n        } catch (err) {\n          console.error('Error preloading data:', err);\n          setError(err.message);\n          setIsLoading(false);\n        }\n      });\n      return function preloadData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    preloadData();\n  }, []);\n  if (isLoading) {\n    return _jsx(SplashScreen, {});\n  }\n  if (error) {\n    return null;\n  }\n  return _jsx(Provider, {\n    store: store,\n    children: _jsxs(SafeAreaProvider, {\n      children: [_jsx(AppNavigator, {}), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","StatusBar","SafeAreaProvider","Provider","store","AppNavigator","AsyncStorage","loginSuccess","apiService","SplashScreen","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","checkLoginStatus","_ref","_asyncToGenerator","token","getItem","user","id","name","email","dispatch","console","apply","arguments","preloadData","_ref2","getHotels","getShortVideos","err","message","children","style"],"sources":["C:/Users/LEGION/Desktop/LAB Projects/bookingapp-phase02/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './src/redux/store';\r\nimport AppNavigator from './src/navigation/AppNavigator';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { loginSuccess } from './src/redux/slices/authSlice';\r\nimport apiService from './src/api/apiService';\r\nimport SplashScreen from './src/screens/SplashScreen';\r\n\r\nexport default function App() {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const checkLoginStatus = async () => {\r\n      try {\r\n        const token = await AsyncStorage.getItem('token');\r\n        if (token) {\r\n          // In a real app, you would validate the token with your backend\r\n          // For now, we'll just simulate a user being logged in\r\n          const user = {\r\n            id: '1',\r\n            name: 'John Doe',\r\n            email: 'john.doe@example.com',\r\n          };\r\n          store.dispatch(loginSuccess(user));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking login status:', error);\r\n      }\r\n    };\r\n\r\n    checkLoginStatus();\r\n    \r\n    const preloadData = async () => {\r\n      try {\r\n        await apiService.getHotels();\r\n        await apiService.getShortVideos();\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.error('Error preloading data:', err);\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    preloadData();\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <SplashScreen />;\r\n  }\r\n\r\n  if (error) {\r\n    return null; // Or an error screen component\r\n  }\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <SafeAreaProvider>\r\n        <AppNavigator />\r\n        <StatusBar style=\"auto\" />\r\n      </SafeAreaProvider>\r\n    </Provider>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,KAAK;AACd,OAAOC,YAAY;AACnB,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,YAAY;AACrB,OAAOC,UAAU;AACjB,OAAOC,YAAY;AAAmC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAEtD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAkCf,QAAQ,CAAC,IAAI,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAA0BpB,QAAQ,CAAC,IAAI,CAAC;IAAAqB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtBtB,SAAS,CAAC,YAAM;IAEd,IAAMyB,gBAAgB;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QACnC,IAAI;UACF,IAAMC,KAAK,SAASrB,YAAY,CAACsB,OAAO,CAAC,OAAO,CAAC;UACjD,IAAID,KAAK,EAAE;YAGT,IAAME,IAAI,GAAG;cACXC,EAAE,EAAE,GAAG;cACPC,IAAI,EAAE,UAAU;cAChBC,KAAK,EAAE;YACT,CAAC;YACD5B,KAAK,CAAC6B,QAAQ,CAAC1B,YAAY,CAACsB,IAAI,CAAC,CAAC;UACpC;QACF,CAAC,CAAC,OAAOP,KAAK,EAAE;UACdY,OAAO,CAACZ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF,CAAC;MAAA,gBAhBKE,gBAAgBA,CAAA;QAAA,OAAAC,IAAA,CAAAU,KAAA,OAAAC,SAAA;MAAA;IAAA,GAgBrB;IAEDZ,gBAAgB,CAAC,CAAC;IAElB,IAAMa,WAAW;MAAA,IAAAC,KAAA,GAAAZ,iBAAA,CAAG,aAAY;QAC9B,IAAI;UACF,MAAMlB,UAAU,CAAC+B,SAAS,CAAC,CAAC;UAC5B,MAAM/B,UAAU,CAACgC,cAAc,CAAC,CAAC;UACjCrB,YAAY,CAAC,KAAK,CAAC;QACrB,CAAC,CAAC,OAAOsB,GAAG,EAAE;UACZP,OAAO,CAACZ,KAAK,CAAC,wBAAwB,EAAEmB,GAAG,CAAC;UAC5ClB,QAAQ,CAACkB,GAAG,CAACC,OAAO,CAAC;UACrBvB,YAAY,CAAC,KAAK,CAAC;QACrB;MACF,CAAC;MAAA,gBAVKkB,WAAWA,CAAA;QAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;MAAA;IAAA,GAUhB;IAEDC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,IAAInB,SAAS,EAAE;IACb,OAAOP,IAAA,CAACF,YAAY,IAAE,CAAC;EACzB;EAEA,IAAIa,KAAK,EAAE;IACT,OAAO,IAAI;EACb;EAEA,OACEX,IAAA,CAACR,QAAQ;IAACC,KAAK,EAAEA,KAAM;IAAAuC,QAAA,EACrB9B,KAAA,CAACX,gBAAgB;MAAAyC,QAAA,GACfhC,IAAA,CAACN,YAAY,IAAE,CAAC,EAChBM,IAAA,CAACV,SAAS;QAAC2C,KAAK,EAAC;MAAM,CAAE,CAAC;IAAA,CACV;EAAC,CACX,CAAC;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}